[{"doc":"This page has not yet sprouted","title":"This page has not yet sprouted","hpath":"403","content":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","url":"https://Matmaus.github.io/notes/403.html","relUrl":"notes/403.html"},{"doc":"Digital Garden","title":"Digital Garden","hpath":"root","content":"\nHome page of my personal Digital Garden. First plant planted in March 2021. I hope the garden will grow with me.\n\nTo read more about Digital Gardens see this one https://wiki.nikitavoloboev.xyz/#grow-your-own-digital-garden.\n","url":"https://Matmaus.github.io","relUrl":"/"},{"doc":"Programming Languages","title":"Programming Languages","hpath":"programming-languages","content":"\nTODO\n","url":"https://Matmaus.github.io/notes/91af5618-11d4-4eb7-9458-dbb9de312c79.html","relUrl":"notes/91af5618-11d4-4eb7-9458-dbb9de312c79.html"},{"doc":"Python","title":"Python","hpath":"programming-languages.python","content":"","url":"https://Matmaus.github.io/notes/ae068c55-dfe6-4839-9d7a-b0c773d5116f.html","relUrl":"notes/ae068c55-dfe6-4839-9d7a-b0c773d5116f.html"},{"doc":"Logging","title":"Logging","hpath":"programming-languages.python.logging","content":"\nUsing [logging](https://docs.python.org/3/library/logging.html) module in Python.\n\n## Application vs Library\n\nA library should not use or configure the root logger. Instead, it should define a new library-specific logger. The specific name can be achieved using `__name__` global variable but it is not reqired. In the case an application does not configure any handler, the default handler will be used, logging messages into `sys.stderr`. `NullHandler()` can be used to avoid such a behaviour. An example of configuration and usage is shown down below. The default logging level is set to `NOTSET` by default.\n\n```python\n## library/__init__.py\nimport logging\n# Create a new library-specific logger\nlogger = logging.getLogger(__name__)\n# Disable default handler\nlogger.addHandler(logging.NullHandler())\n```\n\n```python\n## library/module.py\nfrom library import logger\n\nlogger.info('message')\n```\n\nAn application should configure the root logger. It can use `logging.baseConfig()` to do that. By configuring the root logger, all loggers from all imported libraries can start producing logs. Among using of filters, another solution to disable logging from a specific logger is to use either increase logging level `logging.getLogger('library').setLevel(logging.WARNING)` or disable propagation of messages to the parent loggers `logging.getLogger('library').propagate = False`. An example of using the library mentioned above in and application:\n\n```python\n## a console script\nimport logging\nfrom library import do_something\n\n# Configure the root logger\nlogging.basicConfig(level=logging.DEBUG)  # the rest of parames will be set to default\n# Disable logs below `WARNING` from `another_library`\nlogging.getLogger('another_library').setLevel(logging.WARNING)\n\ndo_something()\n```\n\n## Logger hierarchy\n\nLoggers use a hierarchy. The root is the top-most logger and named loggers are its children, grandchildren and so on. The hierarchy can be acomplished using a dot `.` notation. For example, `logging.getLogger('library')` has not specified any parent using `.`, hence its parent will be the root. Logger named `logging.getLogger('library.a'}` will be a children of logger named `library` if it exists. If it does not exist, the root will be used instead. The hierarchy can be also acomplished using `logging.getLogger('library').getChild('a')`.\n\nThe hierarchy is used for message propagation. The decision whether to log and propagate message to the parent depends on the message level. If the message level is high enough, the message is logged by logger and propagated to the parent logger if exists. The parent loggers invoke all handlers regardless of level.\n\n## Additional notes\n\n- using `logging.debug()` or another module-level logging method directly will invoke the root logger with default configuration if it is not configured already\n- default level of loggers is `NOTSET (0)`. In this case, it will level of first parent with configured level\n\n## Resources\n\n- [Understanding Python’s logging module](https://www.electricmonk.nl/log/2017/08/06/understanding-pythons-logging-module/)\n- [Python Logging: An In-Depth Tutorial](https://www.toptal.com/python/in-depth-python-logging)\n- [Setting up Python logging for a library/app ](https://dev.to/joaomcteixeira/setting-up-python-logging-for-a-library-app-6ml)\n","url":"https://Matmaus.github.io/notes/6ceba88e-f2f0-4689-8238-1380a3c84748.html","relUrl":"notes/6ceba88e-f2f0-4689-8238-1380a3c84748.html"},{"doc":"Git Repositories","title":"Git Repositories","hpath":"git-repositories","content":"\n## Basic Unix/Linux tools replacement\n\n### cd\n\n- [zoxide](https://github.com/ajeetdsouza/zoxide) - a blazing fast alternative to cd, inspired by z and z.lua. It keeps track of the directories you use most frequently, and uses a ranking algorithm to navigate to the best match.\n\n### ls\n\n- [exa](https://github.com/ogham/exa) - a modern replacement for the venerable file-listing command-line program ls, giving it more features and better defaults. It uses colours to distinguish file types and metadata. It knows about symlinks, extended attributes, and Git. And it’s small, fast, and just one single binary.\n- [lsd](https://github.com/Peltoche/lsd) - the next gen ls command\n\n### cat\n\n- [bat](https://github.com/sharkdp/bat) - cat(1) clone with syntax highlighting and Git integration\n\n### find\n\n- [fd](https://github.com/sharkdp/fd) - a program to find entries in your filesytem. It is a simple, fast and user-friendly alternative to find. While it does not aim to support all of find's powerful functionality, it provides sensible (opinionated) defaults for a majority of use cases.\n\n### curl, wget\n\n- [httpie](https://github.com/httpie/httpie) - a command-line HTTP client. Its goal is to make CLI interaction with web services as human-friendly as possible. HTTPie is designed for testing, debugging, and generally interacting with APIs & HTTP servers.\n\n## Interesting tools\n\n- [jq](https://github.com/stedolan/jq) - a lightweight and flexible command-line JSON processor\n- [visidata](https://github.com/saulpw/visidata) - a terminal interface for exploring and arranging tabular data\n- [q](https://github.com/harelba/q) - a command line tool that allows direct execution of SQL-like queries on CSVs/TSVs (and any other tabular text files)\n- [linguist](https://github.com/github/linguist) - a library used on GitHub.com to detect blob languages, ignore binary or vendored files, suppress generated files in diffs, and generate language breakdown graphs.\n- [charlock_holmes](https://github.com/brianmario/charlock_holmes) - character encoding detection, brought to you by ICU.\n","url":"https://Matmaus.github.io/notes/9db25017-3d0f-43f2-9408-37524af1ebf7.html","relUrl":"notes/9db25017-3d0f-43f2-9408-37524af1ebf7.html"}]
